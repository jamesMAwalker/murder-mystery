import { mutation } from './_generated/server'
import { v } from "convex/values";

export const create = mutation({
  args: {
    team_name: v.string(),
    members: v.array(v.id('users'))
  },
  handler: async ({ db }, { team_name, members }) => {

    // Add filter for unattached users 

    // Insert team into db.
    const team = await db.insert('teams', {
      team_name,
      members
    })

    // Update attached status of all added members.
    await Promise.all(members.map(async (userId) => {
      await db.patch(userId, { team: team_name });
    }));

    return team;
  }
})

/*

  * Team Functions *

  - create -
  # Needs: 'team_name'
  # Optional: 'members'
  # Flow: Create a team with at least one member (creating user added by default). Members are selected from list of unattached participants (will add extra flag to users for attached status). Filter for unattached users and add to the team using db.insert(). Update 'attached' flag and 'team_id' for all added users.

  - addMember -
  # Needs: 'team_id', ['user_id', 'user_id', ...] // min: 1, max: 10
  # Flow 1: If a user is a team member, they can add an unattached user to their team. 'team_id' comes from the adding user's entry. Array of 'user_id's comes from a list of unattached users. Filter for unattached users and add to the team using insert. Update 'attached' flag and 'team_id' for each added user.
  # Flow 2: An unattached user can see a list of created teams to join. Selecting a team from the list provides the 'team_id' and the user entry provides the 'user_id'. If user 'attached' is false, use db.patch() to add their id to the team's 'members' array.

  - removeMember -
  # Needs: 'team_id', 'user_id'
  # Flow: Only an admin or the user can remove themselves from a team. Use db.patch() to find the team, and filter the list for non-matching 'user_id'.

  > NOTES:
  # Currently, users have an '_id' generated by Convex as well as a 'user_id' generated by Clerk. I'm trying to find a way to unify them, but for now, note that Convex operations are much easier when using the '_id'. When possible, we should use this to perform db functions.

*/